{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Deforestation Viewer \u2014 NDVI Change Detection (1985\u20132024)","text":"<p>A lightweight Python pipeline for analyzing long-term vegetation change using Landsat (5/7/8/9) and Sentinel-2 imagery via the Microsoft Planetary Computer API. The system computes yearly NDVI (Normalized Difference Vegetation Index) composites and visualizes forest loss or regrowth through a Streamlit dashboard.</p>"},{"location":"#overview","title":"Overview","text":"<p>Purpose: Detect and visualize deforestation trends using satellite imagery from 1985\u20132024. Output: Annual NDVI composites and \u0394NDVI (change) layers stored as Cloud-Optimized GeoTIFFs (COGs). Visualization: Interactive map built with Streamlit and Leafmap.</p>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#1-clone-the-repository","title":"1. Clone the Repository","text":"<pre><code>git clone https://github.com/CryoAether/deforestation-viewer.git\ncd deforestation-viewer\n</code></pre>"},{"location":"#2-set-up-the-environment","title":"2. Set Up the Environment","text":"<pre><code>conda create -n deforest python=3.11\nconda activate deforest\npip install -r requirements.txt\n</code></pre>"},{"location":"#3-run-a-small-ndvi-test","title":"3. Run a Small NDVI Test","text":"<p>Using the included example AOI:</p> <pre><code>MAX_SCENES=6 MAX_CLOUD=80 WINDOW_WEEKS=8 DAY_GAP=10 python src/search_download.py\n</code></pre> <p>Outputs will appear under <code>data/composites/</code>.</p>"},{"location":"#4-launch-the-streamlit-app","title":"4. Launch the Streamlit App","text":"<pre><code>streamlit run src/streamlit_app.py\n</code></pre> <p>Use the controls to view yearly NDVI or compare change between two years.</p>"},{"location":"#example-results","title":"Example Results","text":"Year Observation 1995 Dense canopy, minimal disturbance 2002 Patchy clearing in northern section 2021 Widespread NDVI loss, visible deforestation <p> NDVI change progression \u2014 1995 \u2192 2002 \u2192 2021 </p>"},{"location":"#documentation-sections","title":"Documentation Sections","text":"<ul> <li>Installation &amp; Setup</li> <li>Creating a Custom AOI</li> <li>NDVI Processing Pipeline</li> <li>NDVI Computation &amp; Masking</li> <li>Streamlit Visualization</li> <li>Troubleshooting &amp; Error Fixes</li> </ul>"},{"location":"create_aoi/","title":"Creating a Custom Area of Interest (AOI)","text":"<p>This guide explains how to create your own Area of Interest (AOI) for the Deforestation Viewer, allowing you to analyze NDVI change over any chosen region.</p>"},{"location":"create_aoi/#1-install-qgis","title":"1. Install QGIS","text":"<p>Download and install QGIS 3.x from the official website:</p> <p>https://qgis.org</p> <p>During installation: - Accept default options. - Ensure GDAL support is installed (included in recent QGIS versions).</p> <p>Once installed, launch QGIS. You should see an empty map canvas.</p>"},{"location":"create_aoi/#2-add-a-basemap","title":"2. Add a Basemap","text":"<p>QGIS opens with a blank grid by default. To add a satellite basemap, install the QuickMapServices plugin.</p>"},{"location":"create_aoi/#install-quickmapservices","title":"Install QuickMapServices","text":"<ol> <li>In the menu bar, go to Plugins \u2192 Manage and Install Plugins\u2026 </li> <li>Search for QuickMapServices and click Install Plugin.</li> </ol>"},{"location":"create_aoi/#add-a-basemap","title":"Add a Basemap","text":"<ol> <li>Go to Web \u2192 QuickMapServices \u2192 Settings </li> <li>Click More Services \u2192 Get Contributed Pack \u2192 OK </li> <li>Then open Web \u2192 QuickMapServices \u2192 ESRI \u2192 ESRI Satellite</li> </ol> <p>You should now see high-resolution satellite imagery. This provides a visual reference for accurately drawing your AOI.</p>"},{"location":"create_aoi/#3-draw-your-aoi","title":"3. Draw Your AOI","text":"<ol> <li>In the Layers panel, select New Shapefile Layer \u2192 Polygon (or use Layer \u2192 Create Layer \u2192 New GeoPackage Layer if preferred) </li> </ol> <ol> <li>Set CRS to <code>EPSG:4326 (WGS 84)</code> </li> <li>Click OK to create the layer  </li> <li> <p>Right-click the new layer \u2192 Toggle Editing <p> </p></p> </li> <li> <p>Use the Add Polygon Feature tool to draw your AOI (e.g., a forest, park, or region of interest) <p> </p></p> </li> <li> <p>When done, right-click \u2192 Save Edits, then toggle editing off</p> </li> </ol> <p>Tip: Start with a relatively small AOI (a few thousand km\u00b2 or less) when testing. Larger AOIs may take significantly longer to process.</p>"},{"location":"create_aoi/#4-export-to-geojson","title":"4. Export to GeoJSON","text":"<p>The viewer expects your AOI to be stored as a GeoJSON file at:</p> <pre><code>data/aoi/roi.geojson\n</code></pre> <p>To export:</p> <ol> <li>Right-click your AOI layer \u2192 Export \u2192 Save Features As\u2026 </li> <li>Set:</li> <li>Format: GeoJSON  </li> <li>CRS: <code>EPSG:4326 \u2013 WGS 84</code> </li> <li>File name: <code>data/aoi/roi.geojson</code> </li> <li>Click OK</li> </ol> <p> </p> <p>Your project directory should now look like:</p> <pre><code>deforestation-viewer/\n\u251c\u2500\u2500 data/\n\u2502   \u2514\u2500\u2500 aoi/\n\u2502       \u2514\u2500\u2500 roi.geojson\n</code></pre>"},{"location":"create_aoi/#5-verify-the-aoi","title":"5. Verify the AOI","text":""},{"location":"create_aoi/#option-a-qgis","title":"Option A \u2014 QGIS","text":"<p>Re-open the saved GeoJSON file in QGIS to ensure it displays correctly and covers the intended region.</p>"},{"location":"create_aoi/#option-b-python","title":"Option B \u2014 Python","text":"<p>Verify the AOI programmatically:</p> <pre><code>import geopandas as gpd\n\ngdf = gpd.read_file(\"data/aoi/roi.geojson\")\nprint(gdf.crs, gdf.total_bounds)\n</code></pre> <p>Expected output:</p> <pre><code>EPSG:4326 and valid longitude/latitude bounds\n</code></pre> <p>If CRS or coordinates appear incorrect, re-export the file with the correct settings.</p>"},{"location":"create_aoi/#6-troubleshooting","title":"6. Troubleshooting","text":"Issue Likely Cause Fix AOI not showing or blank Wrong CRS Reproject to <code>EPSG:4326</code> before export AOI appears offset or distorted Latitude/longitude order flipped Ensure GeoJSON uses longitude first Processing fails or hangs AOI too large Use a smaller AOI for testing No imagery found AOI outside Landsat/Sentinel coverage Choose a region with global satellite data availability"},{"location":"create_aoi/#7-next-steps","title":"7. Next Steps","text":"<p>Once your AOI is saved and verified, you can: - Run the NDVI processing pipeline (<code>search_download.py</code>) to generate annual composites - Visualize NDVI and vegetation change in the Streamlit app (<code>streamlit_app.py</code>)</p> <p>For detailed instructions, see: - NDVI Composite Builder - Streamlit Viewer Guide</p>"},{"location":"install/","title":"Installation and Setup","text":"<p>This guide walks through setting up the Deforestation Viewer environment from scratch.</p>"},{"location":"install/#1-clone-the-repository","title":"1. Clone the Repository","text":"<pre><code>git clone https://github.com/CryoAether/deforestation-viewer.git\ncd deforestation-viewer\n</code></pre>"},{"location":"install/#2-create-the-conda-environment","title":"2. Create the Conda Environment","text":"<p>It\u2019s recommended to isolate dependencies in a Conda environment.</p> <pre><code>conda create -n deforest python=3.11\nconda activate deforest\n</code></pre>"},{"location":"install/#3-install-dependencies","title":"3. Install Dependencies","text":"<p>All required packages are listed in <code>requirements.txt</code>:</p> <pre><code>pip install -r requirements.txt\n</code></pre> <p>Tip: Installation may take a few minutes, especially for geospatial libraries like <code>rioxarray</code> and <code>geopandas</code>.</p>"},{"location":"install/#4-set-up-microsoft-planetary-computer-mpc","title":"4. Set Up Microsoft Planetary Computer (MPC)","text":"<p>The pipeline retrieves satellite data directly from the MPC API. You don\u2019t need an API key for public collections, but you must agree to the Terms of Use.</p> <p>If you experience network rate-limiting, sign up for a free Planetary Computer account and authenticate once in your session:</p> <pre><code>import planetary_computer as pc\npc.sign_in()\n</code></pre>"},{"location":"install/#5-verify-installation","title":"5. Verify Installation","text":"<p>Run the following test to confirm all libraries are working:</p> <pre><code>python -c \"import stackstac, planetary_computer, geopandas; print('\u2705 Environment ready')\"\n</code></pre> <p>If no errors appear, you\u2019re ready to proceed.</p> <p>Next: Create a Custom AOI \u2192</p>"},{"location":"ndvi/","title":"NDVI Computation and Masking (<code>ndvi.py</code>)","text":"<p>This module performs Normalized Difference Vegetation Index (NDVI) calculations and masks invalid pixels such as clouds, water, and snow for both Landsat and Sentinel-2 datasets. It is imported and called by <code>search_download.py</code> to compute annual NDVI composites.</p>"},{"location":"ndvi/#overview","title":"Overview","text":"<p>The functions in <code>ndvi.py</code> ensure that NDVI values are calculated consistently across sensors and that non-vegetation artifacts are removed before compositing. By isolating this logic, the main processing pipeline remains modular, easy to test, and extensible.</p>"},{"location":"ndvi/#functions","title":"Functions","text":""},{"location":"ndvi/#compute_ndvi_mixedred-nir-cfg","title":"<code>compute_ndvi_mixed(red, nir, cfg)</code>","text":"<p>Computes NDVI using the formula: <code>NDVI = (NIR - Red) / (NIR + Red)</code></p> <ul> <li>Applies dataset-specific scaling (<code>cfg[\"scale\"]</code>) and offset (<code>cfg[\"offset\"]</code>) for Landsat and Sentinel imagery.  </li> <li>Returns an NDVI array as <code>float32</code>.</li> </ul> <p>Parameters: - <code>red</code>: Red band array - <code>nir</code>: Near-Infrared band array - <code>cfg</code>: Dataset configuration dictionary  </p> <p>Returns: A normalized NDVI array between -1 and 1.</p>"},{"location":"ndvi/#mask_cloudsscl-arr","title":"<code>mask_clouds(scl, arr)</code>","text":"<p>Masks invalid Sentinel-2 pixels using Scene Classification Layer (SCL) codes. Converts SCL values to integers and replaces all cloud, water, and snow classes with <code>NaN</code>.</p> <p>Key behavior: - Ensures only valid surface reflectance pixels remain - Used exclusively for Sentinel-2 (<code>cfg[\"mask\"] == \"s2\"</code>)</p>"},{"location":"ndvi/#mask_clouds_mixedqa-arr-cfg","title":"<code>mask_clouds_mixed(qa, arr, cfg)</code>","text":"<p>Applies the correct cloud/snow/water masking depending on dataset type.</p> <ul> <li> <p>Sentinel-2:   Uses <code>SCL_BAD</code> class codes to filter unwanted categories.  </p> </li> <li> <p>Landsat:   Applies the QA bitmask <code>_L8_BAD</code> to remove clouds, cirrus, snow, and water pixels.  </p> </li> </ul> <p>This ensures all NDVI composites are generated only from valid, cloud-free data.</p>"},{"location":"ndvi/#bitmask-definitions","title":"Bitmask Definitions","text":"Constant Purpose Used For <code>_L8_BAD</code> Bitmask for Landsat QA_PIXEL flags (cloud, cirrus, snow, etc.) Landsat 5\u20139 <code>SCL_BAD</code> Array of Sentinel-2 SCL class values to mask (3 = shadow, 6\u201311 = cloud/snow/water) Sentinel-2"},{"location":"ndvi/#integration-with-the-pipeline","title":"Integration with the Pipeline","text":"<ol> <li><code>search_download.py</code> loads the Red, NIR, and QA bands.  </li> <li><code>compute_ndvi_mixed()</code> scales reflectance and computes NDVI.  </li> <li><code>mask_clouds_mixed()</code> removes clouded or invalid pixels.  </li> <li>The cleaned NDVI arrays are reduced across time into annual composites.</li> </ol> <p>This modular design allows <code>search_download.py</code> to handle both Landsat and Sentinel-2 data uniformly.</p>"},{"location":"ndvi/#visualization-guidance","title":"Visualization Guidance","text":"<p>You can preview the NDVI outputs using either QGIS or the Streamlit app (<code>streamlit_app.py</code>):</p> <ul> <li>Green \u2192 healthy vegetation (high NDVI)  </li> <li>Yellow to red \u2192 deforested or barren areas (low NDVI)</li> </ul> <p>For clarity, consider including a before/after masking image in future documentation showing how clouds and snow are filtered out.</p>"},{"location":"ndvi/#example-workflow","title":"Example Workflow","text":"<pre><code>from ndvi import compute_ndvi_mixed, mask_clouds_mixed\n\nndvi = compute_ndvi_mixed(red_band, nir_band, cfg)\nclean_ndvi = mask_clouds_mixed(qa_band, ndvi, cfg)\n</code></pre> <p>The resulting <code>clean_ndvi</code> can then be passed into the compositing step in <code>search_download.py</code>.</p>"},{"location":"ndvi/#notes","title":"Notes","text":"<ul> <li>Always use scaled reflectance inputs (not raw DN values).  </li> <li>Consistent scaling and masking are essential to ensure accurate temporal NDVI comparisons across years and sensors.  </li> <li>Outputs are written as <code>float32</code> to balance precision and file size.</li> </ul>"},{"location":"search_download/","title":"NDVI Composite Builder (search_download.py)","text":"<p>This module retrieves Landsat and Sentinel-2 imagery from the Microsoft Planetary Computer (MPC), masks clouds and invalid pixels, computes NDVI for each scene, and writes annual seasonal composites as Cloud-Optimized GeoTIFFs (COGs).</p> <ul> <li>Input: <code>data/aoi/roi.geojson</code> (EPSG:4326)</li> <li>Output: <code>data/composites/ndvi_median_&lt;YEAR&gt;.tif</code></li> <li>Years covered: 1985\u20132024 (Landsat 5/7/8/9 and Sentinel-2)</li> </ul>"},{"location":"search_download/#overview","title":"Overview","text":"<p><code>search_download.py</code> forms the processing backbone of the Deforestation Viewer. It automatically selects the correct satellite dataset, retrieves imagery, builds multi-temporal stacks, computes NDVI, and outputs a single cleaned composite per year.</p>"},{"location":"search_download/#quick-start","title":"Quick Start","text":"<ol> <li> <p>Prepare an AOI    Ensure <code>data/aoi/roi.geojson</code> exists in EPSG:4326.    See create_aoi.md if you need guidance.</p> </li> <li> <p>Run the pipeline <code>bash    # Process all years, allow clouds up to 80%, 8-week seasonal window, 10-day de-dupe gap    MAX_SCENES=None MAX_CLOUD=80 WINDOW_WEEKS=8 DAY_GAP=10 python src/search_download.py</code></p> </li> <li> <p>Inspect outputs    Composites are written to <code>data/composites/</code>.    Load them in the Streamlit app or any GIS tool.</p> </li> </ol>"},{"location":"search_download/#what-the-script-does","title":"What the Script Does","text":"<ol> <li>Selects dataset by year</li> <li>1985\u20132012 \u2192 Landsat 5/7 (L57)  </li> <li>2013\u2013present \u2192 Landsat 8/9 (L89)  </li> <li> <p>2016\u2013present \u2192 Sentinel-2 L2A (S2)</p> </li> <li> <p>Searches scenes via STAC</p> </li> <li>Filters by date range and AOI intersection  </li> <li>Applies cloud cover threshold (<code>eo:cloud_cover</code>)  </li> <li>Deduplicates to the lowest cloud cover per tile/day  </li> <li> <p>Optionally subsamples with <code>DAY_GAP</code> to limit redundancy</p> </li> <li> <p>Builds a stack with StackSTAC</p> </li> <li>Clips to AOI bounds  </li> <li>Reprojects to a UTM CRS inferred from the AOI  </li> <li> <p>Uses Dask for lazy evaluation (no local storage required)</p> </li> <li> <p>Computes NDVI per scene</p> </li> <li>Applies dataset-specific scale and offset rules  </li> <li>Sentinel-2: reflectance scaled by 1/10,000  </li> <li>Landsat: reflectance scale \u2248 2.75e\u221205, offset \u2248 \u22120.2  </li> <li> <p>NDVI formula: <code>(NIR \u2212 RED) / (NIR + RED)</code></p> </li> <li> <p>Masks clouds, water, snow</p> </li> <li>Sentinel-2: uses SCL classification  </li> <li> <p>Landsat: uses QA_PIXEL bitmask</p> </li> <li> <p>Creates a seasonal composite</p> </li> <li>Reduces along time using <code>.max(dim=\"time\")</code> </li> <li> <p>Produces a single NDVI raster per year</p> </li> <li> <p>Writes Cloud-Optimized GeoTIFFs</p> </li> <li>Saves as <code>float32</code> COGs with DEFLATE compression  </li> <li>Ensures valid CRS and affine transform metadata</li> </ol>"},{"location":"search_download/#environment-variables","title":"Environment Variables","text":"<p>Tune the run directly from the command line without editing the code.</p> Variable Purpose Example <code>MAX_SCENES</code> Limit scenes per year for speed (<code>None</code> = all). <code>MAX_SCENES=None</code> or <code>MAX_SCENES=12</code> <code>MAX_CLOUD</code> Cloud cover threshold (%) for STAC query. <code>MAX_CLOUD=60</code> <code>WINDOW_WEEKS</code> Length of seasonal window. <code>WINDOW_WEEKS=12</code> \u2192 12-week growing season <code>WINDOW_START_MONTH</code> Month where window starts. <code>WINDOW_START_MONTH=7</code> \u2192 July <code>WINDOW_START_DAY</code> Day of month to start. <code>WINDOW_START_DAY=1</code> <code>DAY_GAP</code> Minimum days between accepted scenes per tile. <code>DAY_GAP=10</code> \u2192 ~1 scene every 10 days <p>Examples</p> <pre><code># Aggressive data pull over a longer season\nMAX_SCENES=None MAX_CLOUD=85 WINDOW_WEEKS=12 DAY_GAP=8 python src/search_download.py\n\n# Faster development run over a short window\nMAX_SCENES=8 MAX_CLOUD=70 WINDOW_WEEKS=6 DAY_GAP=12 python src/search_download.py\n</code></pre>"},{"location":"search_download/#controlling-years","title":"Controlling Years","text":"<p>By default:</p> <pre><code>years = list(range(1985, 2025))\n</code></pre> <p>Common edits:</p> <pre><code># Single year\nyears = [2016]\n\n# Span of years\nyears = list(range(2000, 2006))  # 2000\u20132005 inclusive\n\n# Last decade\nyears = list(range(2015, 2025))\n</code></pre>"},{"location":"search_download/#implementation-notes","title":"Implementation Notes","text":""},{"location":"search_download/#dataset-registry-datasets","title":"Dataset Registry (<code>DATASETS</code>)","text":"<p>Each dataset defines the STAC collection, band names, masking strategy, and reflectance scale/offset. The correct configuration is automatically selected using <code>select_dataset(year)</code>.</p>"},{"location":"search_download/#landsat-asset-resolution","title":"Landsat Asset Resolution","text":"<p>Planetary Computer occasionally renames bands. <code>resolve_landsat_assets()</code> checks the first item to confirm the correct RED, NIR, and QA keys (e.g., <code>SR_B3</code>, <code>SR_B4</code>, <code>SR_B5</code>, or <code>QA_PIXEL</code>).</p>"},{"location":"search_download/#cloud-masking","title":"Cloud Masking","text":"<ul> <li>Sentinel-2: masks <code>SCL</code> categories (cloud, cirrus, snow, water, shadow)  </li> <li>Landsat: uses <code>_L8_BAD</code> bitmask from <code>QA_PIXEL</code></li> </ul>"},{"location":"search_download/#crs-handling","title":"CRS Handling","text":"<p>The AOI is reprojected to an estimated UTM CRS. If a CRS is missing from the output, it\u2019s written from the AOI before export.</p>"},{"location":"search_download/#performance-and-memory","title":"Performance and Memory","text":"<ul> <li>Dask lazily evaluates all computations  </li> <li><code>MAX_SCENES</code> and <code>DAY_GAP</code> limit per-year data volume  </li> <li>Chunks are tuned for balance: <code>{\"time\": 1, \"y\": 512, \"x\": 512}</code></li> </ul>"},{"location":"search_download/#troubleshooting","title":"Troubleshooting","text":"Symptom Likely Cause Fix \u201cNo scenes for year\u201d AOI outside coverage or too strict filters Increase <code>MAX_CLOUD</code>, adjust <code>WINDOW_*</code>, verify AOI geometry \u201cStack has 0 bands\u201d Asset mismatch Check <code>resolve_landsat_assets()</code> and printed asset keys COG write fails mid-run Memory limits during compression Reduce <code>MAX_SCENES</code> or shorten <code>WINDOW_WEEKS</code> Colors appear wrong Missing scale/offset or nodata handling Confirm dataset scales and ensure zeros are masked Misaligned pixels CRS mismatch Let the script assign CRS automatically (avoid manual reprojection)"},{"location":"search_download/#how-the-composite-is-formed","title":"How the Composite Is Formed","text":"<ul> <li>Per scene: invalid pixels masked, reflectance scaled, NDVI computed  </li> <li>Per year: NDVI reduced with <code>.max(dim=\"time\", skipna=True)</code> </li> <li>Output: float32 COG with CRS and transform set from NIR band</li> </ul> <p>Alternative reducers:</p> <pre><code># Median\nndvi_med = ndvi_t.median(dim=\"time\", skipna=True)\n\n# 95th percentile\nndvi_med = ndvi_t.quantile(0.95, dim=\"time\", skipna=True)\n</code></pre>"},{"location":"search_download/#next-steps","title":"Next Steps","text":"<p>Once the composites are generated, open the viewer:</p> <pre><code>streamlit run src/streamlit.py\n</code></pre> <p>This allows interactive exploration, year comparison, and \u0394NDVI visualization.</p>"},{"location":"streamlit_app/","title":"Streamlit App Guide \u2014 (streamlit_app.py)","text":"<p>This page explains how to run the Streamlit map, compare years, tune the visualization, and adjust code paths when needed.</p> <p>Purpose: The Streamlit app renders yearly NDVI composites and an interactive change layer (\u0394NDVI) over your AOI using a Leaflet map inside Streamlit.</p>"},{"location":"streamlit_app/#overview","title":"Overview","text":"<p>The Streamlit app is the front-end interface of the Deforestation Viewer. It allows you to explore vegetation trends interactively and visualize NDVI change over time using pre-computed composites generated by <code>search_download.py</code>.</p>"},{"location":"streamlit_app/#1-quick-start","title":"1. Quick Start","text":""},{"location":"streamlit_app/#prerequisites","title":"Prerequisites","text":"<ul> <li>You have generated NDVI composites with <code>src/search_download.py</code>.   Output files should be located in: <code>data/composites/ndvi_median_&lt;YEAR&gt;.tif</code></li> <li>Your AOI exists at <code>data/aoi/roi.geojson</code> and uses CRS <code>EPSG:4326</code>.</li> </ul>"},{"location":"streamlit_app/#run-the-app","title":"Run the App","text":"<p>Be sure you\u2019re in the repository root and run:</p> <pre><code>streamlit run src/streamlit_app.py\n</code></pre> <p>The app automatically discovers available composite rasters in <code>data/composites/</code> and populates the year selector.</p>"},{"location":"streamlit_app/#2-using-the-app","title":"2. Using the App","text":""},{"location":"streamlit_app/#modes","title":"Modes","text":"<p>You can switch between two modes at the top of the app:</p> <ul> <li>View single year   Displays NDVI for one selected year using a green-to-red scale.  </li> <li>Green \u2192 healthy vegetation  </li> <li> <p>Red \u2192 low vegetation or disturbance  </p> </li> <li> <p>Compare change (\u0394NDVI)   Choose a \u201cFrom\u201d year and a \u201cTo\u201d year. The app computes the difference on the fly: <code>\u0394NDVI = NDVI(To) \u2212 NDVI(From)</code> </p> </li> <li>Positive values indicate greening  </li> <li>Negative values indicate vegetation loss  </li> </ul>"},{"location":"streamlit_app/#map-basics","title":"Map Basics","text":"<ul> <li>Basemap: <code>Esri.WorldImagery</code> (high-resolution satellite imagery)  </li> <li>Map centers automatically on your AOI centroid  </li> <li>Use the layer control (upper-right corner) to toggle NDVI and change layers</li> </ul>"},{"location":"streamlit_app/#3-getting-the-most-out-of-it","title":"3. Getting the Most Out of It","text":""},{"location":"streamlit_app/#pick-useful-year-pairs","title":"Pick Useful Year Pairs","text":"<ul> <li>Try comparing 2016 \u2192 2020, 2000 \u2192 2021, or pre-event \u2192 post-event periods  </li> <li>Smaller AOIs improve performance and render faster  </li> </ul>"},{"location":"streamlit_app/#normalize-change-smartly","title":"Normalize Change Smartly","text":"<p>\u0394NDVI can have extreme values. The app computes symmetric limits from the 2nd and 98th percentiles:  </p> <pre><code>vmin, vmax = robust_delta_range(delta_tif)\n</code></pre> <p>This keeps the visualization balanced and comparable across regions.</p>"},{"location":"streamlit_app/#4-file-and-path-layout","title":"4. File and Path Layout","text":"<pre><code>data/\n\u251c\u2500\u2500 aoi/\n\u2502   \u2514\u2500\u2500 roi.geojson\n\u251c\u2500\u2500 composites/\n\u2502   \u251c\u2500\u2500 ndvi_median_1985.tif\n\u2502   \u251c\u2500\u2500 ndvi_median_1986.tif\n\u2502   \u2514\u2500\u2500 ...\n\u2514\u2500\u2500 change/\n    \u2514\u2500\u2500 ndvi_delta_&lt;FROM&gt;_&lt;TO&gt;.tif\n</code></pre> <ul> <li>AOI: <code>data/aoi/roi.geojson</code> </li> <li>Composites: pre-generated annual NDVI rasters  </li> <li>Change rasters: created automatically during comparison</li> </ul>"},{"location":"streamlit_app/#5-understanding-the-code","title":"5. Understanding the Code","text":""},{"location":"streamlit_app/#directory-assumptions","title":"Directory Assumptions","text":"<pre><code>BASE_DIR = pl.Path(__file__).resolve().parents[1]\nCOMP_DIR = BASE_DIR / \"data\" / \"composites\"\nCHANGE_DIR = BASE_DIR / \"data\" / \"change\"\nCHANGE_DIR.mkdir(parents=True, exist_ok=True)\n</code></pre> <p>Update these paths if you store data elsewhere.</p>"},{"location":"streamlit_app/#discovering-available-years","title":"Discovering Available Years","text":"<pre><code>files = sorted(list(COMP_DIR.glob(\"ndvi_median_*.tif\")) + list(COMP_DIR.glob(\"ndvi_median_*.tiff\")))\nyears = sorted({int(p.stem.split(\"_\")[-1]) for p in files})\n</code></pre> <ul> <li>Automatically detects years from filenames  </li> <li>If you change the naming pattern, update the <code>glob</code> accordingly  </li> </ul>"},{"location":"streamlit_app/#centering-on-the-aoi","title":"Centering on the AOI","text":"<pre><code>aoi = gpd.read_file(BASE_DIR / \"data\" / \"aoi\" / \"roi.geojson\")\ncenter = [aoi.geometry.centroid.y.mean(), aoi.geometry.centroid.x.mean()]\n</code></pre> <ul> <li>Computes the centroid of your AOI for the initial map view  </li> <li>Falls back to <code>[0, 0]</code> if AOI is missing  </li> </ul>"},{"location":"streamlit_app/#reading-rasters-and-aligning-grids","title":"Reading Rasters and Aligning Grids","text":"<pre><code>def open_ndvi(y: int):\n    p = ndvi_path(y)\n    da = rxr.open_rasterio(str(p)).squeeze()\n    return da\n</code></pre> <ul> <li>Uses <code>rioxarray</code> to read the COG file  </li> <li><code>squeeze()</code> removes extra dimensions (e.g., if the raster has a singleton band dimension)</li> </ul> <pre><code>def write_delta_tif(y1: int, y2: int) -&gt; pl.Path:\n    ndvi1 = open_ndvi(y1)\n    ndvi2 = open_ndvi(y2)\n    if not (ndvi2.rio.crs == ndvi1.rio.crs and ndvi2.rio.transform() == ndvi1.rio.transform()):\n        ndvi2 = ndvi2.rio.reproject_match(ndvi1)\n    delta = (ndvi2 - ndvi1)\n    delta = delta.rio.write_nodata(-9999, inplace=False).fillna(-9999)\n    delta = delta.rio.write_crs(ndvi1.rio.crs, inplace=False)\n    delta.rio.to_raster(out, driver=\"COG\", compress=\"DEFLATE\")\n</code></pre> <ul> <li>Ensures both rasters share the same CRS and grid before differencing  </li> <li>Writes \u0394NDVI once and reuses it for subsequent runs  </li> <li>You can change the <code>nodata</code> value from <code>-9999</code>, but keep it consistent across outputs  </li> </ul>"},{"location":"streamlit_app/#color-range-for-ndvi","title":"Color Range for \u0394NDVI","text":"<pre><code>def robust_delta_range(delta_path: pl.Path):\n    p2, p98 = np.percentile(vals[mask], [2, 98])\n    mx = float(max(abs(p2), abs(p98), 0.05))\n    return (-mx, mx)\n</code></pre> <ul> <li>Creates a symmetric range around zero for fair visualization of gain/loss  </li> <li>Increase the minimum floor from <code>0.05</code> to <code>0.1</code> if the changes look muted  </li> </ul>"},{"location":"streamlit_app/#map-layer-styling","title":"Map Layer Styling","text":"<p>Single Year Mode</p> <pre><code>m.add_raster(raster_path, cmap=\"RdYlGn\", opacity=0.9, layer_name=f\"NDVI {year}\")\nm.add_colormap(cmap=\"RdYlGn\", vmin=0.0, vmax=1.0, label=f\"NDVI {year}\")\n</code></pre> <ul> <li>You can change <code>cmap</code> to any Matplotlib colormap (<code>PuBuGn</code>, <code>YlGn</code>, etc.)  </li> <li>Keep <code>vmin=0.0</code>, <code>vmax=1.0</code> since NDVI is normalized to [0, 1]  </li> </ul> <p>Change Mode</p> <pre><code>m.add_raster(str(delta_tif), colormap=\"coolwarm\", vmin=vmin, vmax=vmax, opacity=0.85, layer_name=f\"\u0394NDVI {y_from}\u2192{y_to}\")\nm.add_colormap(cmap=\"coolwarm\", vmin=vmin, vmax=vmax, label=f\"\u0394NDVI {y_from}\u2192{y_to}\")\n</code></pre> <ul> <li>Diverging colormaps like <code>bwr</code> or <code>RdBu</code> also work well for \u0394NDVI  </li> </ul>"},{"location":"streamlit_app/#6-tips-for-performance","title":"6. Tips for Performance","text":"<ul> <li>Use smaller AOIs for faster rendering  </li> <li>Avoid comparing very distant years when testing  </li> <li>If tiles render slowly, verify composites were generated with reasonable chunk sizes and close other resource-heavy programs  </li> </ul>"},{"location":"streamlit_app/#7-troubleshooting","title":"7. Troubleshooting","text":"Symptom Likely Cause Fix No years found Composites not generated or filename pattern changed Run the NDVI pipeline or update the <code>COMP_DIR.glob(...)</code> pattern Map centers to (0, 0) AOI missing or invalid Place a valid AOI at <code>data/aoi/roi.geojson</code> with CRS <code>EPSG:4326</code> \u0394NDVI looks noisy Grids not aligned between years The app reprojects automatically; rerun if inputs changed Colors appear off <code>vmin/vmax</code> range too narrow or wide Adjust <code>robust_delta_range</code> floor or set fixed limits manually"},{"location":"streamlit_app/#next-steps","title":"Next Steps","text":"<p>Once you\u2019re satisfied with your composites and visualization:</p> <ul> <li>Document your AOI and NDVI results  </li> <li>Consider exporting \u0394NDVI rasters for GIS-based analysis  </li> <li>See search_download.md for details on generating input composites</li> </ul>"},{"location":"troubleshooting/","title":"Troubleshooting and Common Issues","text":"<p>Below is a collection of frequent problems and their fixes when running the Deforestation Viewer.</p>"},{"location":"troubleshooting/#general-problems","title":"General Problems","text":"Issue Likely Cause Fix No imagery found for certain years AOI outside satellite coverage or cloud filter too strict Increase <code>MAX_CLOUD</code>, extend <code>WINDOW_WEEKS</code>, or verify AOI location AOI not showing in Streamlit Missing or invalid <code>roi.geojson</code> Recreate the AOI and ensure CRS is <code>EPSG:4326</code> Streamlit map centers on (0,0) AOI centroid failed to calculate Check that <code>data/aoi/roi.geojson</code> contains a valid polygon Output colors look inverted or strange Incorrect scaling or missing nodata masking Verify scale/offset in <code>DATASETS</code> and ensure zeros are masked before NDVI computation Slow processing or crashes AOI too large or too many scenes Reduce AOI size, lower <code>WINDOW_WEEKS</code>, or limit <code>MAX_SCENES</code> \u0394NDVI map looks noisy Raster alignment mismatch Let script reproject automatically and rerun affected years"},{"location":"troubleshooting/#installation-errors","title":"Installation Errors","text":"Error Cause Solution <code>ImportError: No module named stackstac</code> StackSTAC not installed Run <code>pip install -r requirements.txt</code> again <code>gdal-config not found</code> GDAL missing from Conda Run <code>conda install -c conda-forge gdal</code> <code>planetary_computer</code> import fails Outdated package index Run <code>pip install planetary-computer --upgrade</code>"},{"location":"troubleshooting/#git-or-environment-issues","title":"Git or Environment Issues","text":"Error Cause Solution <code>Permission denied</code> when saving files Folder not writable Run from project root or check folder permissions <code>fatal: Need to specify how to reconcile divergent branches</code> Local Git branch behind remote Run <code>git pull origin main --rebase</code> before pushing Conda environment not activating Typo in environment name Check with <code>conda env list</code> and ensure you\u2019re in <code>deforest</code> <p>If you encounter something new, open an issue on GitHub or contact the repository maintainer.</p> <p>Next: NDVI Processing Pipeline \u2192</p>"}]}